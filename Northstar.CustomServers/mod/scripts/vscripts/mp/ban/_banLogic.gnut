untyped
global function BanLogic_init

void function BanLogic_init()
{

	
	// featured mode settings
	AddCallback_OnPlayerRespawned( BanLogicInGame )
	

	AddCallback_OnUpdateDerivedPlayerTitanLoadout(CheckTitanForBanLogic)

	// iron lts rules
	if ( HasIronRules() ) 
		Riff_ForceTitanExitEnabled( eTitanExitEnabled.Never )



	foreach(entity player in GetPlayerArray())
	{
		GetTitanLoadoutForPlayer(player)
	}

	AddCallback_GameStateEnter( eGameState.Playing, TitanEarning_OnPlaying )
}

void function TitanEarning_OnPlaying()
{
    wait 0.001 // wait a frame to make sure the normal earn meter setting is done and doesn't override our one.

    Riff_ForceTitanAvailability( eTitanAvailability.Custom )
    svGlobal.titanAvailabilityCheck = IsTitanAvailable

    SetCallback_EarnMeterGoalEarned( TitanEarning_TitanEarned )
	SetCallback_EarnMeterRewardEarned( BoostEarning_TitanEarned )
}

void function BoostEarning_TitanEarned( entity player )
{
	if( GetFirstAvailableBoost().name != "Null" ) //check if boosts are disabled
	{
		EarnObject earnobject = PlayerEarnMeter_GetReward( player )
		BurnReward burncard = BurnReward_GetByRef( earnobject.ref )

		while ( burncard.ref == "burnmeter_random_foil" )
			burncard = BurnReward_GetRandom()

		for ( int i = 0; i < BurnMeter_GetLimitedRewardCount( player ); i++ )
			BurnMeter_GiveRewardDirect( player, burncard.ref )

		PlayerEarnMeter_DisableReward( player )
	} 
}

void function TitanEarning_TitanEarned( entity player )
{
    if ( GetFirstAvailableTitan().name != "Null" ) //Check if all titans are banned
        SetTitanAvailable( player )
    else
    {
        float oldRewardFrac = PlayerEarnMeter_GetRewardFrac( player )
        PlayerEarnMeter_Reset( player )
        PlayerEarnMeter_SetRewardFrac( player, oldRewardFrac )
        PlayerEarnMeter_EnableReward( player )
    }
}


// TODO add all calbacks , put everything into functs , stesstest, look into titant respawn banlogic  aka on lts / titanBrawl , maybe look into changing loadout when ejecting in lts (all the other mods ignore it)

void function BanLogicInGame(entity player)
{
	if ( player.IsTitan() ||  GameRules_GetGameMode() == LAST_TITAN_STANDING ||  GameRules_GetGameMode() == TITAN_BRAWL )
		{
			return
		}
		else if(GetGameState() == eGameState.Prematch)
		{
			// I think this could solve a bug where the game crashes when you use the mod for the first time running  
			SetActiveTitanLoadout(player)
		
			return
		}

	bool shouldChangeLoadout = false
	// create loadout struct
	PilotLoadoutDef modifiedLoadout = clone GetActivePilotLoadout( player )


	// Weapon ban vars 
	bool shouldRemovePrim = false
	bool shouldRemoveSec = false
	bool shouldRemoveAbility = false
	bool shouldRemoveWeapon3 = false
	bool shouldRemoveGrenade = false
	
	bool EditedKit = false
	string message  = "Your Kit used Baned weapons: \n"

	if(player.IsTitan())
	{
		return
	}

	shouldChangeLoadout = true 

	WeaponBanStruct weapon
        
	for(int CheckingWeapon = 0; CheckingWeapon < getWeaponBanData().len(); CheckingWeapon++ )
	{
		WeaponBanStruct weapon = getWeaponBanData()[CheckingWeapon]

		//check Primary
		if(modifiedLoadout.primary == weapon.name && weapon.disabled)
		{
			printt("----------------------------------- changed prim")
			EditedKit = true
				
			WeaponBanStruct newWeapon = GetFirstAvailablePrimaryWeapon()

			if (newWeapon.name != "Null" )
			{ 
				modifiedLoadout.primary = newWeapon.name
				message += "primary changet to: " + newWeapon.name +" \n"
				// if mod1 is forced && mod 2 is free and its the same as forced mod1 we ignore it, but you can do it if  you want  tf2 wont crash
				if( newWeapon.mod1 != "UNDEFINED")
				{
					modifiedLoadout.primaryMods[0] = newWeapon.mod1
					modifiedLoadout.primaryAttachments = newWeapon.visor
				}

				if( newWeapon.mod2 != "UNDEFINED")
				{
					modifiedLoadout.primaryMods[1] = newWeapon.mod2
					modifiedLoadout.primaryAttachments = newWeapon.visor
				}	
			}
			else
			{
				shouldRemovePrim = true
				message += "Primary Removed \n"
			}

			}
			//check Secondary Slot
			else if(modifiedLoadout.secondary == weapon.name && weapon.disabled)
			{
				printt("----------------------------------- changed SEC ")
				EditedKit = true


				 WeaponBanStruct  newWeapon

				if ( GetWeaponInfoFileKeyField_Global( player.GetMainWeapons()[ 1 ].GetWeaponClassName(), "menu_category" ) == "at" )
				{
				   newWeapon = GetFirstAvailableAtWeapon()
				}
				else
				{
			       newWeapon = GetFirstAvailableSecWeapon()
				}
				
				if (newWeapon.name != "Null" )
				{ 
					modifiedLoadout.secondary = newWeapon.name
					message += "Secondary changet to: " + newWeapon.name +" \n"

					// if mod1 is forced && mod 2 is free and its the same as forced mod1 we ignore it, but you can do it if  you want  tf2 wont crash
					if( weapon.mod1 != "UNDEFINED")
					{
						modifiedLoadout.secondaryMods[0] = newWeapon.mod1
					}

					if( weapon.mod2 != "UNDEFINED")
					{
						modifiedLoadout.secondaryMods[1] = newWeapon.mod2
					}	
				}
				else
				{
					shouldRemoveSec = true
					message += "Secondary Removed \n"
				}
			}
				//check 3rd Slot
			else if(modifiedLoadout.weapon3 == weapon.name && weapon.disabled)
			{
				printt("----------------------------------- changed weapon 3")
				EditedKit = true
				WeaponBanStruct  newWeapon
 				if ( GetWeaponInfoFileKeyField_Global( player.GetMainWeapons()[ 2 ].GetWeaponClassName(), "menu_category" ) == "at" )
				{
				   newWeapon = GetFirstAvailableAtWeapon()
				}
				else
				{
			       newWeapon = GetFirstAvailableSecWeapon()
				}
				
				if (newWeapon.name != "Null" )
				{ 
					modifiedLoadout.weapon3 = newWeapon.name
					
					message += "Weapon 3 changet to: " + newWeapon.name +" \n"

					if( newWeapon.mod1 != "UNDEFINED")
					{
						modifiedLoadout.weapon3Mods[0] = newWeapon.mod1
					}

					if( newWeapon.mod2 != "UNDEFINED")
					{
						modifiedLoadout.weapon3Mods[1] = newWeapon.mod2
					}	
				}
				else
				{
					shouldRemoveWeapon3 = true
					message += "Weapon 3 Removed \n"
				}
			}
			if(modifiedLoadout.primary == weapon.name && (weapon.mod1 != "UNDEFINED" || weapon.mod2 != "UNDEFINED" ))
			{
				modifiedLoadout.primaryMods[0] = weapon.mod1
				modifiedLoadout.primaryMods[1] = weapon.mod2
				modifiedLoadout.primaryAttachments = weapon.visor
			}
			if(modifiedLoadout.secondary == weapon.name && (weapon.mod1 != "UNDEFINED" || weapon.mod2 != "UNDEFINED" ))
			{
				modifiedLoadout.secondaryMods[0] = weapon.mod1
				modifiedLoadout.secondaryMods[1] = weapon.mod2
			}
			if(modifiedLoadout.weapon3 == weapon.name && (weapon.mod1 != "UNDEFINED" || weapon.mod2 != "UNDEFINED" ))
			{
				modifiedLoadout.weapon3Mods[0] = weapon.mod1
				modifiedLoadout.weapon3Mods[1] = weapon.mod2
			}
		}

		// Granades
		for(int i = 0; i < getGrenadeBanData().len(); i++)
		{
			UniversalBanStruct grenade = getGrenadeBanData()[i]
			if(grenade.name == modifiedLoadout.ordnance)
			{
				if(grenade.disabled) 
				{
					printt("----------------------------------- changed Grenade")
					EditedKit = true
					UniversalBanStruct newUniversalBanStruct = GetFirstAvailableGrenade()
				
					if(newUniversalBanStruct.name != "Null")
					{
				    	modifiedLoadout.ordnance = newUniversalBanStruct.name
						message += " Ordanace changed to " + newUniversalBanStruct.name +  " \n"
					}
					else
					{
						shouldRemoveGrenade = true
						message += "Granades Removed \n"
					}
				}
				break
			} 
		}

		//Ability
		for(int i = 0; i < getAbilityBanData().len(); i++)
		{
			UniversalBanStruct ability =  getAbilityBanData()[i]
			if(ability.name == modifiedLoadout.special)
			{
				if(ability.disabled) {
					EditedKit = true
					UniversalBanStruct NewAbilityStruct = GetFirstAvailableAbility()

					if(NewAbilityStruct.name != "Null" )
					{
				 		modifiedLoadout.special = NewAbilityStruct.name
				 		message += "Abillity changed to "+ NewAbilityStruct.name  + " \n"
					}
					else
					{
				 		shouldRemoveAbility = true
				 		message += "Ability Removed  \n"
					}
				}
				break
			}
		}

		//boost
		BoostBanStruct currentBoost = GetBoostStructById(player.GetPersistentVar("burnmeterSlot"))
		
		if(currentBoost.disabled) 
		{
			BoostBanStruct newBoost = GetFirstAvailableBoost()

			if(newBoost.name != "Null")
			{
				EditedKit = true
				player.SetPersistentVar( "burnmeterSlot", newBoost.id )
				message += "Boost changed to "+ newBoost.name  + " \n"
			}
		}
	
	// dont wanna give a new loadout if it's not necessary, could break other callbacks
	if ( shouldChangeLoadout )
	{
		GivePilotLoadout( player, modifiedLoadout )
	}

	if(shouldRemovePrim)
	{
		player.TakeWeapon(modifiedLoadout.primary)
	}

	if(shouldRemoveSec)
	{
		player.TakeWeapon(modifiedLoadout.secondary)
	}

	if(shouldRemoveWeapon3)
	{
		player.TakeWeapon(modifiedLoadout.weapon3)
	}

	if(shouldRemovePrim &&  shouldRemoveSec && shouldRemoveWeapon3)
	{
		player.GiveWeapon("mp_weapon_rocket_launcher")
		player.SetActiveWeaponByName( "mp_weapon_rocket_launcher" )
	}
	
	if(shouldRemoveGrenade)
		player.TakeOffhandWeapon( OFFHAND_ORDNANCE )

	if(shouldRemoveAbility)
		player.TakeOffhandWeapon( OFFHAND_SPECIAL )

	if(EditedKit)
	SendHudMessage( player, message, 2.5,-2.5,255,0,0, 255, 0, 4, 1 )
}

WeaponBanStruct function GetFirstAvailablePrimaryWeapon()
{
	for(int i = 0; i < 23; i++ )
	{
		WeaponBanStruct CurrentCheckingWeapon  = getWeaponBanData()[i]
		
		if(CurrentCheckingWeapon.disabled == false)
		{

			return CurrentCheckingWeapon
			
		}
	}

	return createWeaponBanStruct("Null")
}


WeaponBanStruct function GetFirstAvailableSecWeapon()
{
 for(int i = 23; i < 26; i++ )
	{
		WeaponBanStruct CurrentCheckingWeapon  =	getWeaponBanData()[i]
		
		if(CurrentCheckingWeapon.disabled == false)
		{

			return  CurrentCheckingWeapon
		}
	}
	
	return createWeaponBanStruct("Null")
}

WeaponBanStruct function GetFirstAvailableAtWeapon()
{
 	for(int i = 27; i < 30; i++ )
	{
		WeaponBanStruct CurrentCheckingWeapon  =  getWeaponBanData()[i]
		
		if(CurrentCheckingWeapon.disabled == false)
		{
			return CurrentCheckingWeapon
		
		}
	}

	return createWeaponBanStruct("Null")
}

UniversalBanStruct function GetFirstAvailableGrenade()
{
	for(int i = 0; i < getGrenadeBanData().len(); i++)
	{
		UniversalBanStruct CurrentCheckingGrenade = getGrenadeBanData()[i]
		if(CurrentCheckingGrenade.disabled == false)
		{
			return CurrentCheckingGrenade
		}
	}

	return createUniversalBanStruct("Null")
}

UniversalBanStruct function GetFirstAvailableAbility()
{
	for(int i = 0; i < getAbilityBanData().len(); i++)
	{
		UniversalBanStruct CurrentCheckingAbility = getAbilityBanData()[i]
		if(CurrentCheckingAbility.disabled == false)
		{
			return CurrentCheckingAbility
		}
	}

	return createUniversalBanStruct("Null")
}

BoostBanStruct function GetFirstAvailableBoost()
{
	for(int i = 0; i < getBoostBanData().len(); i++)
	{
		BoostBanStruct CurrentCheckingBoost = getBoostBanData()[i]

		if(CurrentCheckingBoost.disabled == false)
		{
			return CurrentCheckingBoost
		}
	}
	return createBoostBanStruct("Null", 0)
}

TitanBanStruct function GetFirstAvailableTitan()
{
	
	for(int i = 0; i < getTitanBanData().len(); i++)
	{
		TitanBanStruct CurrentCheckingTitan = getTitanBanData()[i]
		if(!CurrentCheckingTitan.disabled)
		{
			return CurrentCheckingTitan
		}
	}
	return createTitanBanStruct("Null")
}

void function CheckTitanForBanLogic(entity player,TitanLoadoutDef currentTitanLoadout)	
{
	
		print("----------------------------------------------------------- BEFORE CHANGE")
		PrintTitanLoadout(currentTitanLoadout)

		int titanLoadoutIndex 
		TitanBanStruct	titanStruct
	
		if(GetTitanStructByName(currentTitanLoadout.titanClass).disabled)
		{

	 		titanStruct  = GetFirstAvailableTitan()

			 PrintTitanStruct(titanStruct)

			
			if(titanStruct.name == "Null")
			{
				return
			}

			print("------------------------- Changed titan")

			titanLoadoutIndex = GetTitanLoadoutIndexByName(titanStruct.name)
			

			//currentTitanLoadout =  GetTitanLoadoutFromPersistentDataWithoutCallback(player,titanLoadoutIndex)

			
			currentTitanLoadout.titanClass = titanStruct.name

			currentTitanLoadout.primaryMod = GetValidatedPersistentLoadoutValue( player, "titan", titanLoadoutIndex, "primaryMod" )
			currentTitanLoadout.ordnance =  GetValidatedPersistentLoadoutValue( player, "titan", titanLoadoutIndex, "ordnance" )
			currentTitanLoadout.special =  GetValidatedPersistentLoadoutValue( player, "titan", titanLoadoutIndex, "special" )
			currentTitanLoadout.antirodeo = GetValidatedPersistentLoadoutValue( player, "titan", titanLoadoutIndex, "antirodeo" )

			currentTitanLoadout.passive1 			= GetValidatedPersistentLoadoutValue( player, "titan", titanLoadoutIndex, "passive1" )
			currentTitanLoadout.passive2 			= GetValidatedPersistentLoadoutValue( player, "titan", titanLoadoutIndex, "passive2" )
			currentTitanLoadout.passive3 			= GetValidatedPersistentLoadoutValue( player, "titan", titanLoadoutIndex, "passive3" )
			currentTitanLoadout.passive4 			= GetValidatedPersistentLoadoutValue( player, "titan", titanLoadoutIndex, "passive4" )
			currentTitanLoadout.passive5 			= GetValidatedPersistentLoadoutValue( player, "titan", titanLoadoutIndex, "passive5" )
			currentTitanLoadout.passive6 			= GetValidatedPersistentLoadoutValue( player, "titan", titanLoadoutIndex, "passive6" )

			currentTitanLoadout.camoIndex			= GetValidatedPersistentLoadoutValueInt( player, "titan", titanLoadoutIndex, "camoIndex" )
			currentTitanLoadout.skinIndex			= GetValidatedPersistentLoadoutValueInt( player, "titan", titanLoadoutIndex, "skinIndex" ) 
			currentTitanLoadout.decalIndex			= GetValidatedPersistentLoadoutValueInt( player, "titan", titanLoadoutIndex, "decalIndex" )
			currentTitanLoadout.primaryCamoIndex	= GetValidatedPersistentLoadoutValueInt( player, "titan", titanLoadoutIndex, "primaryCamoIndex" )
			currentTitanLoadout.primarySkinIndex	= GetValidatedPersistentLoadoutValueInt( player, "titan", titanLoadoutIndex, "primarySkinIndex" ) 
			currentTitanLoadout.titanExecution 		= GetValidatedPersistentLoadoutValue( player, "titan", titanLoadoutIndex, "titanExecution" )
			currentTitanLoadout.showArmBadge		= GetValidatedPersistentLoadoutValueInt( player, "titan", titanLoadoutIndex, "showArmBadge" )

			// find out how prime Titans are handeled 
			currentTitanLoadout.isPrime	= GetValidatedPersistentLoadoutValue( player, "titan", titanLoadoutIndex, "isPrime" )

		} 
		else
		{
			titanStruct = GetTitanStructByName(currentTitanLoadout.titanClass)
		}
	
		if(titanStruct.passive1 != "UNDEFINED")
		{
			print("------------------------- Changed titan passive 1")
			print("-------------------------------" + titanStruct.passive1)
			currentTitanLoadout.passive1 =  titanStruct.passive1 
		}
	
		if(titanStruct.passive2 != "UNDEFINED")
		{
			print("------------------------- Changed titan passive 2")
			print("-------------------------------" + titanStruct.passive2)
			currentTitanLoadout.passive2 =  titanStruct.passive2
		}
	
		if(titanStruct.passive3 != "UNDEFINED")
		{
			print("------------------------- Changed titan passive 3")
			print("-------------------------------" + titanStruct.passive3)
			currentTitanLoadout.passive3 =  titanStruct.passive3
		}

		if( titanStruct.name == "vanguard" )
		{
			titanStruct = GetTitanStructByName("vanguardCores")
			
			if(titanStruct.passive1 != "UNDEFINED")
			{
				print("------------------------- Changed titan passive 4")
				currentTitanLoadout.passive4 =  titanStruct.passive1
			}
	
			if(titanStruct.passive2 != "UNDEFINED")
			{
				print("------------------------- Changed titan passive 5")
				
				currentTitanLoadout.passive5 =  titanStruct.passive1
			}

	
			if(titanStruct.passive3 != "UNDEFINED")
			{
				print("------------------------- Changed titan passive 6")
				currentTitanLoadout.passive6 =  titanStruct.passive1
			}
		}

	// shitfix for the moments where these values are "null" should be ""
	if(currentTitanLoadout.passive4 == "null")
	{
		currentTitanLoadout.primaryMod = ""
		currentTitanLoadout.passive4 = ""
		currentTitanLoadout.passive5 = ""
		currentTitanLoadout.passive6 = ""
	}	
}


TitanBanStruct function GetTitanStructByName(string TitanName)
{
	array<TitanBanStruct> titanArray = getTitanBanData()

  switch(TitanName)
  {
	  	case"ion" :
	return titanArray[0]

	case "scorch" :
	return titanArray[1]

	case "northstar":
	return titanArray[2]

	case "ronin" :
	return titanArray[3]

	case "tone" :
	return titanArray[4]

	case "legion" :
	return titanArray[5]

	case "vanguard" :
	return titanArray[6] 

	case "vanguardCores" :
	return titanArray[7] 
	}

	print("Titan Name Out of Range")
	return titanArray[0]
}


void function PrintTitanStruct(TitanBanStruct TitanBanStruct)
{
	print("-------------------------------------------- TitanBanStruct Print------------------")
	print(TitanBanStruct.name)
	print(TitanBanStruct.disabled)
	print("----------------------------------------- Passives")
	print(TitanBanStruct.passive1)
	print(TitanBanStruct.passive2)
	print(TitanBanStruct.passive3)
	print("---------------------------------------------------------------------------------------")

}

BoostBanStruct function GetBoostStructById(var id)
{
	for(int i = 0; i <  getBoostBanData().len();i++)
	{
		if(getBoostBanData()[i].id == id) 
		{
			return getBoostBanData()[i]
		}
	}
	return getBoostBanData()[0]
}

int function GetTitanLoadoutIndexByName(string TitanName)
{
	switch(TitanName)
	{
	
	case"ion" :
	return 0

	case "scorch" :
	return 1

	case "northstar":
	return 2 

	case "ronin" :
	return 3

	case "tone" :
	return 4

	case "legion" :
	return 5

	case "vanguard" :
	return 6 
	}

	return -1
}